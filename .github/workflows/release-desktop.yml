name: Release desktop

#on:
#  push:
#    tags:
#      - 'v*'  # This will trigger the workflow on push to tags like v1.0, v2.0, etc.

on:
  push:
    branches:
      - "master"

jobs:
  build-windows:
    name: Build Windows binaries
    runs-on: windows-latest
    environment: production
    defaults:
      run:
        working-directory: 'frontend'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
          override: true

      - name: Install Dependencies
        run: npm ci

      - name: Build Tauri App
        run: npm run tauri-build

      - name: Upload Windows portable exe
        uses: actions/upload-artifact@v4
        with:
          name: exe
          path: |
            ./frontend/src-tauri/target/release/bundle/msi/*.msi
            ./frontend/src-tauri/target/release/bundle/nsis/*.exe 
            ./frontend/src-tauri/target/release/*.exe
  

  publish:
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Download the previously uploaded artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        id: download
        with:
          name: exe
          path: exe

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./my-artifact.zip
          asset_name: my-artifact.zip
          asset_content_type: application/zip
